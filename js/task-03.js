//! Task condition:
// In the markup of the HTML document "task-03.html" to which this JS file (task-03.js) is connected, there is a list (<ul> tag) - "ul.gallery". Also, as the main data that should be used in solving this task, the code of the initial array of objects "images" is given. Taking into account the initial components described above, it is necessary to write a JS script code that:
  // 1. Will create a set of <img> elements nested in <li> tags, using the data from the original array of objects "images". To create markup, you must use "template strings" and the "insertAdjacentHTML()" method.
  // 2. All elements of the image gallery created by the script must be added to the "DOM" structure of the HTML document in one insertion operation.
  // 3. It is necessary to add a minimal design for the image gallery created by the script, using CSS classes and flexbox or grids for this.


// The initial array of objects - "images".
const images = [
  {
    url: 'https://images.pexels.com/photos/140134/pexels-photo-140134.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',
    alt: 'White and Black Long Fur Cat',
  },
  {
    url: 'https://images.pexels.com/photos/213399/pexels-photo-213399.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',
    alt: 'Orange and White Koi Fish Near Yellow Koi Fish',
  },
  {
    url: 'https://images.pexels.com/photos/219943/pexels-photo-219943.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',
    alt: 'Group of Horses Running',
  },
];


//! Solution of the task:
// 1. Created a variable-link to the tag-<ul> (by "class" attribute - "gallery") of the list presented in the markup HTML document;
const listEl = document.querySelector('.gallery');

// 2. Creating a function for generating HTML markup for the <li> tag and its nested <img> tag, based on the use of data about the content of the "url" and "alt" attributes for the <img> tag generated by this function. The function provides for obtaining data about the values of the "url" and "alt" attributes for the created <img> tag from the argument it receives as an object.
const makeGalegyImegeMarkup = image => {
  // 2.1. Operating "destructuring" the argument-object received by the function.
  const { url, alt } = image;
  
  // 2.2. Using template strings to create the necessary markup returned as a result of the function.
  return `<li class="gallery_item"><img class="gallery_img" src="${url}" alt="${alt}"></li>`;
};

// 3. Creating an additional variable "galegyMarkup" and assigning it the value of an automatically generated string with the markup of all generated <li> tags. The markup is formed based on the use of the "makeGalegyImegeMarkup" function, which is substituted as an argument in the "map()" method, and the subsequent conversion of the results into a string literal - using the "join()" method.
const galegyMarkup = images.map(makeGalegyImegeMarkup).join('');

// 4. Inserting the generated markup into the HTML document in one operation, using the "insertAdjacentHTML()" method.
listEl.insertAdjacentHTML("afterbegin", galegyMarkup);


// 5. The minimum required clearance elements of the gallery created using the script, were performed based on the use of CSS class attributes: "gallery" from <ul> tag; "gallery_item" from <li> tags & "gallery_img" from <img> tags. The listed classes have been added to the main CSS file - "common.css" attached to the HTML document. For a description of the corresponding styles, see - ./css/common.css.

